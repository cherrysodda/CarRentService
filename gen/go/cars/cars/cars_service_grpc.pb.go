// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package carsService_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CarsClient is the client API for Cars service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarsClient interface {
	CreateCar(ctx context.Context, in *CreateCarRequest, opts ...grpc.CallOption) (*CreateCarResponse, error)
	ListCars(ctx context.Context, in *ListCarRequest, opts ...grpc.CallOption) (*ListCarRepsonse, error)
	GetCarById(ctx context.Context, in *GetCarRequest, opts ...grpc.CallOption) (*GetCarResponse, error)
	RentCar(ctx context.Context, in *RentCarRequest, opts ...grpc.CallOption) (*RentCarResponse, error)
}

type carsClient struct {
	cc grpc.ClientConnInterface
}

func NewCarsClient(cc grpc.ClientConnInterface) CarsClient {
	return &carsClient{cc}
}

func (c *carsClient) CreateCar(ctx context.Context, in *CreateCarRequest, opts ...grpc.CallOption) (*CreateCarResponse, error) {
	out := new(CreateCarResponse)
	err := c.cc.Invoke(ctx, "/carsService.Cars/CreateCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) ListCars(ctx context.Context, in *ListCarRequest, opts ...grpc.CallOption) (*ListCarRepsonse, error) {
	out := new(ListCarRepsonse)
	err := c.cc.Invoke(ctx, "/carsService.Cars/ListCars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) GetCarById(ctx context.Context, in *GetCarRequest, opts ...grpc.CallOption) (*GetCarResponse, error) {
	out := new(GetCarResponse)
	err := c.cc.Invoke(ctx, "/carsService.Cars/GetCarById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carsClient) RentCar(ctx context.Context, in *RentCarRequest, opts ...grpc.CallOption) (*RentCarResponse, error) {
	out := new(RentCarResponse)
	err := c.cc.Invoke(ctx, "/carsService.Cars/RentCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarsServer is the server API for Cars service.
// All implementations must embed UnimplementedCarsServer
// for forward compatibility
type CarsServer interface {
	CreateCar(context.Context, *CreateCarRequest) (*CreateCarResponse, error)
	ListCars(context.Context, *ListCarRequest) (*ListCarRepsonse, error)
	GetCarById(context.Context, *GetCarRequest) (*GetCarResponse, error)
	RentCar(context.Context, *RentCarRequest) (*RentCarResponse, error)
	mustEmbedUnimplementedCarsServer()
}

// UnimplementedCarsServer must be embedded to have forward compatible implementations.
type UnimplementedCarsServer struct {
}

func (UnimplementedCarsServer) CreateCar(context.Context, *CreateCarRequest) (*CreateCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCar not implemented")
}
func (UnimplementedCarsServer) ListCars(context.Context, *ListCarRequest) (*ListCarRepsonse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCars not implemented")
}
func (UnimplementedCarsServer) GetCarById(context.Context, *GetCarRequest) (*GetCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCarById not implemented")
}
func (UnimplementedCarsServer) RentCar(context.Context, *RentCarRequest) (*RentCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentCar not implemented")
}
func (UnimplementedCarsServer) mustEmbedUnimplementedCarsServer() {}

// UnsafeCarsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarsServer will
// result in compilation errors.
type UnsafeCarsServer interface {
	mustEmbedUnimplementedCarsServer()
}

func RegisterCarsServer(s *grpc.Server, srv CarsServer) {
	s.RegisterService(&_Cars_serviceDesc, srv)
}

func _Cars_CreateCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).CreateCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsService.Cars/CreateCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).CreateCar(ctx, req.(*CreateCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_ListCars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).ListCars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsService.Cars/ListCars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).ListCars(ctx, req.(*ListCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_GetCarById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).GetCarById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsService.Cars/GetCarById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).GetCarById(ctx, req.(*GetCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cars_RentCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarsServer).RentCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/carsService.Cars/RentCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarsServer).RentCar(ctx, req.(*RentCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Cars_serviceDesc = grpc.ServiceDesc{
	ServiceName: "carsService.Cars",
	HandlerType: (*CarsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCar",
			Handler:    _Cars_CreateCar_Handler,
		},
		{
			MethodName: "ListCars",
			Handler:    _Cars_ListCars_Handler,
		},
		{
			MethodName: "GetCarById",
			Handler:    _Cars_GetCarById_Handler,
		},
		{
			MethodName: "RentCar",
			Handler:    _Cars_RentCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cars/cars_service.proto",
}
