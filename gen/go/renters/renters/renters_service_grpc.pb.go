// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rentersService_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RentersClient is the client API for Renters service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RentersClient interface {
	CreateRenter(ctx context.Context, in *CreateRenterRequest, opts ...grpc.CallOption) (*CreateRenterResponse, error)
	ListRenters(ctx context.Context, in *ListRentersRequest, opts ...grpc.CallOption) (*ListRentersResponse, error)
	GetRenterById(ctx context.Context, in *GetRenterRequest, opts ...grpc.CallOption) (*GetRenterResponse, error)
	RentCar(ctx context.Context, in *RentCarRequest, opts ...grpc.CallOption) (*RentCarResponse, error)
}

type rentersClient struct {
	cc grpc.ClientConnInterface
}

func NewRentersClient(cc grpc.ClientConnInterface) RentersClient {
	return &rentersClient{cc}
}

func (c *rentersClient) CreateRenter(ctx context.Context, in *CreateRenterRequest, opts ...grpc.CallOption) (*CreateRenterResponse, error) {
	out := new(CreateRenterResponse)
	err := c.cc.Invoke(ctx, "/rentersService.Renters/CreateRenter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentersClient) ListRenters(ctx context.Context, in *ListRentersRequest, opts ...grpc.CallOption) (*ListRentersResponse, error) {
	out := new(ListRentersResponse)
	err := c.cc.Invoke(ctx, "/rentersService.Renters/ListRenters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentersClient) GetRenterById(ctx context.Context, in *GetRenterRequest, opts ...grpc.CallOption) (*GetRenterResponse, error) {
	out := new(GetRenterResponse)
	err := c.cc.Invoke(ctx, "/rentersService.Renters/GetRenterById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rentersClient) RentCar(ctx context.Context, in *RentCarRequest, opts ...grpc.CallOption) (*RentCarResponse, error) {
	out := new(RentCarResponse)
	err := c.cc.Invoke(ctx, "/rentersService.Renters/RentCar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RentersServer is the server API for Renters service.
// All implementations must embed UnimplementedRentersServer
// for forward compatibility
type RentersServer interface {
	CreateRenter(context.Context, *CreateRenterRequest) (*CreateRenterResponse, error)
	ListRenters(context.Context, *ListRentersRequest) (*ListRentersResponse, error)
	GetRenterById(context.Context, *GetRenterRequest) (*GetRenterResponse, error)
	RentCar(context.Context, *RentCarRequest) (*RentCarResponse, error)
	mustEmbedUnimplementedRentersServer()
}

// UnimplementedRentersServer must be embedded to have forward compatible implementations.
type UnimplementedRentersServer struct {
}

func (UnimplementedRentersServer) CreateRenter(context.Context, *CreateRenterRequest) (*CreateRenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRenter not implemented")
}
func (UnimplementedRentersServer) ListRenters(context.Context, *ListRentersRequest) (*ListRentersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRenters not implemented")
}
func (UnimplementedRentersServer) GetRenterById(context.Context, *GetRenterRequest) (*GetRenterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRenterById not implemented")
}
func (UnimplementedRentersServer) RentCar(context.Context, *RentCarRequest) (*RentCarResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RentCar not implemented")
}
func (UnimplementedRentersServer) mustEmbedUnimplementedRentersServer() {}

// UnsafeRentersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RentersServer will
// result in compilation errors.
type UnsafeRentersServer interface {
	mustEmbedUnimplementedRentersServer()
}

func RegisterRentersServer(s *grpc.Server, srv RentersServer) {
	s.RegisterService(&_Renters_serviceDesc, srv)
}

func _Renters_CreateRenter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentersServer).CreateRenter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentersService.Renters/CreateRenter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentersServer).CreateRenter(ctx, req.(*CreateRenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renters_ListRenters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRentersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentersServer).ListRenters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentersService.Renters/ListRenters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentersServer).ListRenters(ctx, req.(*ListRentersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renters_GetRenterById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRenterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentersServer).GetRenterById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentersService.Renters/GetRenterById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentersServer).GetRenterById(ctx, req.(*GetRenterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Renters_RentCar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RentCarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RentersServer).RentCar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rentersService.Renters/RentCar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RentersServer).RentCar(ctx, req.(*RentCarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Renters_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rentersService.Renters",
	HandlerType: (*RentersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRenter",
			Handler:    _Renters_CreateRenter_Handler,
		},
		{
			MethodName: "ListRenters",
			Handler:    _Renters_ListRenters_Handler,
		},
		{
			MethodName: "GetRenterById",
			Handler:    _Renters_GetRenterById_Handler,
		},
		{
			MethodName: "RentCar",
			Handler:    _Renters_RentCar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "renters/renters_service.proto",
}
